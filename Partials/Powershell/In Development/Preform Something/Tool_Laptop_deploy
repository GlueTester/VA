# The logical process: 
#     1.Clear all previosu variables: Declair-Varaibles
#     2.Find out if deplyment is New or Replacment: Get-DeploymentType
#     3.Grab EE of the New or Old and New: Get-EE
#     4.Take information user provides to locate user SAM account
#     5.Gather information about SAM account
#     6.Find Last login for the one or two EEs
#     7.Email deployment information to the IMS group

#1 Declair-Varaibles
#Get-DeploymentType

#Email-IMS

function Declair-Varaibles{
$Status=""
$choice1=""
$choice2=""
$EE=""
$FirstName=""
$LastName=""
$SamAccount=""
$NewEE = "97449"  #manuale testing
$OldEE = "99271"  #manuale testing
clear
} #Clear old variables and creat placeholders for future ones.

function Get-DeploymentType{
#Arrays for options
$Option1 = "New","new","n","N" 
$Option2 = "Replacment","replacment","r","R"

#Ask if deploymnet is new or a relacment
while ($choice2 -notmatch "y"){
        $Status="" #If the user selects anything buy "y" for choice 2 the loop starts over, so we have to clear previous choices
        $choice1="" 
        while ($Status -notmatch "New|Replacement")
        {
            $choice1 = Read-Host "Is this deployment NEW or REPLACMENT? (N/R):"
            if ($Option1 -contains $choice1)
            {
               $Status = "New"
            }
            elseif ($Option2 -contains $choice1)
            {
                $Status = "Replacement"
            }
            else
            {
                Write-Host "Please select from (New or Replacment)"
   
            }
         }


$choice2 = read-host "Ok this is a $Status deployment correct? (Y/N)"

    If ($choice2 -eq "y")
    { break } 
    
}
Write-Host "End of the line, status is:$Status "   #for testing
} #Determine if deplyment is New or Replacment

function Get-EE{
clear
$choice2 = ""
#Ask what the EE is
while ($choice2 -notmatch "y"){
        $OldEE="" #If the user selects anything buy "y" for choice 2 the loop starts over, so we have to clear previous choices
        $NewEE=""
        if ($Status -notmatch "New"){$OldEE = Read-Host "What is the EE nmumber of the OLD system?:"}
        $NewEE = Read-Host "What is the EE nmumber of the NEW system?:"

if ($Status -notmatch "New"){
$choice2 = read-host "I have OLD EE:$OldEE and New EE:$NewEE . Is that correct? (Y/N)"
}
else
{
$choice2 = read-host "I have the new issue EE as:$NewEE . Is that correct? (Y/N)"
}
    If ($choice2 -eq "y")
    { break } 
clear
#Write-Host "Sorry, let us try agin"    
}
#Write-Host "End of the line, old ee: $OldEE new EE:$NewEE "#for testing
}#Ask for new and old EE numbers

function Resolve-SamAccount{
$FirstName = "Derek"  #manuale testing   CANT BE A ACCOUNT WITH A ZERO IT DOUBLE FEEDS
$LastName = "Devine"  #manuale testing CANT BE A ACCOUNT WITH A ZERO IT DOUBLE FEEDS
$NewEE = "97449"  #manuale testing
$OldEE = "99271"  #manuale testing
#$FirstName="Randy" #manuale testing
#$LastName="White"  #manuale testing

$GetSamAccountName = (Get-ADUser -Filter "GivenName -like '$FirstName*' -and Surname -like '$LastName*'").SamAccountName
$SamAccount=$GetSamAccountName
}#Get the user info

function Get-LastLogin{
##Static formulas already filled by inputs
$NewComputerDomainName = Get-ADComputer -Filter "Name -like '*$NewEE'" -SearchBase 'OU=Lexington (LEX),OU=VISN09,DC=v09,DC=med,DC=va,DC=gov' | Select -ExpandProperty Name
$NewMachineStatsDir= "Y:\Public\LogonScripts\Lognoff$\machinestats\$NewComputerDomainName.log"
$NewMachineLogSearch = Get-Content -tail 1 $NewMachineStatsDir | Select-String -Pattern "$SamAccount" #https://www.techepages.com/how-to-get-the-last-line-of-a-file-using-powershell/#:~:text=The%20command%20to%20fetch%20the%20last%20line%20of,sample.txt%20from%20under%20d%3Atest_folder_1%2C%20the%20command%20will%20become%3A

$OldComputerDomainName = Get-ADComputer -Filter "Name -like '*$OldEE'" -SearchBase 'OU=Lexington (LEX),OU=VISN09,DC=v09,DC=med,DC=va,DC=gov' | Select -ExpandProperty Name
$OldMachineStatsDir= "Y:\Public\LogonScripts\Lognoff$\machinestats\$OldComputerDomainName.log"
$OldMachineLogSearch = Get-Content -tail 1 $OldMachineStatsDir | Select-String -Pattern "$SamAccount" #https://www.techepages.com/how-to-get-the-last-line-of-a-file-using-powershell/#:~:text=The%20command%20to%20fetch%20the%20last%20line%20of,sample.txt%20from%20under%20d%3Atest_folder_1%2C%20the%20command%20will%20become%3A

Write-Host $NewComputerDomainName
Write-Host $NewMachineStatsDir
Write-Host $NewMachineLogSearch
Write-Host $OldComputerDomainName
Write-Host $OldMachineStatsDir
Write-Host $OldMachineLogSearch

$SamAccount =$SamAccount[0] #MANUALK IMOUT BECUSE USING TECH

if ($NewMachineLogSearch -ne $null)
{
    $UserLoggedinNewMachine = "True"
}
else
{
    $UserLoggedinOldMachine = "False"
}


}

function Get-SamAccountInfo{
#$GetUserInfo= Get-ADUser -Identity "$SamAccount"-Properties Title | Select-Object Title,GivenName,SurName
$GetEmail= (Get-ADUser -Identity "$SamAccount").UserPrincipalName
$GetTitle= (Get-ADUser -Identity "$SamAccount"-Properties Title).Title
$GetFirstName= (Get-ADUser -Identity "$SamAccount").GivenName
$GetLastName= (Get-ADUser -Identity "$SamAccount").Surname
}

function Email-IMS{

#create COM object named Outlook
$Outlook = New-Object -ComObject Outlook.Application 

#create Outlook MailItem named Mail using CreateItem() method
$Mail = $Outlook.CreateItem(0)

#add properties as desired
$Mail.To='russelltking@gmail.com' #testing
#$Mail.To='vhalex.imsmobile@va.gov' #actual
$Mail.Subject="'Laptop $Status EE:$EE"
if ($Status -notmatch "New"){
    $Mail.Body=(
    "Type Of Deplyment: $Status
    New EE: $NewEE
    Old EE: $OldEE 

    Full name: $ComputerDomainName
    User Name: $GetFirstName $GetLastName
    User Email: $GetEmail
    User SAM Account Name: $SamAccount

    Did user Log in New Machine: $UserLoggedinNewmachine 
    Did user Log in Old Machine: $UserLoggedinOldmachine
    Last Login New Machine: $NewMachineLogSearch 
    Last Login Old Machine: $OldMachineLogSearch
    
    Deployed By:$env:UserName")
}
else
{
    $Mail.Body=("Type Of Deplyment: $Status `n
    New EE: $NewEE
    Full name: $ComputerDomainName `n 
    User Name: $GetFirstName $GetLastName `n
    User Email: $GetEmail `n
    User SAM Account Name: $SamAccount `n
    Did user Log in New Machine: $UserLoggedinNewmachine `n 
    Last Login New Machine: $NewMachineLogSearch")
}
#********https://stackoverflow.com/questions/33751194/powershell-email-how-to-add-new-line-in-email-body


#send message
    #$Mail.Send()
Write-Host $Mail.To
Write-Host $Mail.Subject
Write-Host $Mail.Body

#quit and cleanup
$Outlook.Quit()# [System.Runtime.Interopservices.Marshal]::ReleaseComObject($Outlook) | Out-Null
$Mail.Body=""
}

function AccountInfo{
	$site=Read-Host "Please choise information you have about user"
	Switch ($site)
	{
		S {$Choseninfo="SAMS Account"}
		N {$Choseninfo="Firstname Lastname"}
		}
    return $Chosensite
}


#####NOTES
###find user in log file
#$MachineLogSearch = Select-String -Path $MachineStatsDir -Pattern "VHALEXCHRISR"                #********************https://stackoverflow.com/questions/41871147/find-specific-string-in-textfile
##$MachineLogSearch = Get-Content -tail 1 $MachineStatsDir | Select-String -Pattern "$SamAccount" #https://www.techepages.com/how-to-get-the-last-line-of-a-file-using-powershell/#:~:text=The%20command%20to%20fetch%20the%20last%20line%20of,sample.txt%20from%20under%20d%3Atest_folder_1%2C%20the%20command%20will%20become%3A


####----------------Email the inputs------------------------#########


