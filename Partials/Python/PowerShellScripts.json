{"ResolveHostname": "$EE=\"109869\"\n$SearchType = \"Basic\"\n$jsonfile = \"Partials/Python/PowerShellScripts.json\"\n    $json = Get-Content $jsonfile | Out-String | ConvertFrom-Json\n    $EE = $json.EE\n    write-host $EE\n    $ImportedEE = $EE\n    if ( $ImportedEE -eq $null){\n        write-host \"EE is blank, ENV EE is $EE\"\n        exit\n    }\n    $ImportedEE = \"*\"+$ImportedEE # This is to add the wild card to the front and not have to quote in the search\n    #Sources https://mikefrobbins.com/2018/10/03/use-powershell-to-install-the-remote-server-administration-tools-rsat-on-windows-10-version-1809/    https://stackoverflow.com/questions/28740320/how-do-i-check-if-a-powershell-module-is-installed\n    if (Get-Module -ListAvailable -Name activedirectory) {\n        Import-Module activedirectory\n        If ($SearchType -eq \"Quick\"){\n            $OUSearchScope = \"OU=Lexington (LEX),OU=VISN09,DC=v09,DC=med,DC=va,DC=gov\"\n        }\n        Else{\n            $OUSearchScope = \"OU=Laptops, OU=Lexington (LEX),OU=VISN09,DC=v09,DC=med,DC=va,DC=gov\"\n            $HostnameSearch_lvl1 = Get-ADComputer -Filter * -SearchBase $OUSearchScope | Where-Object {$_.Name -like $ImportedEE} | Select-Object -ExpandProperty Name #Searches : OU=Laptops,OU=Lexington (LEX),OU=VISN09,DC=v09,DC=med,DC=va,DC=gov\n            if (!$HostnameSearch_lvl1) {\n                Write-Host \"The EE $ImportedEE could be found in OU: $OUSearchScope\" -foreground Red\n                $HostnameSearch_lvl2 = Get-ADComputer -Filter * -SearchBase $OUSearchScope.Split(\",\", 2)[1] | Where-Object {$_.Name -like $ImportedEE} | Select-Object -ExpandProperty Name #Searches : OU=Lexington (LEX),OU=VISN09,DC=v09,DC=med,DC=va,DC=gov\n                if (!$HostnameSearch_lvl2) {\n                    Write-Host \"The EE $ImportedEE could not be found in OU: \" $OUSearchScope.Split(\",\", 2)[1] \" Trying one level higher\" -foreground Red\n                    $HostnameSearch_lvl3 = Get-ADComputer -Filter * -SearchBase $OUSearchScope.Split(\",\", 3)[2] | Where-Object {$_.Name -like $ImportedEE} | Select-Object -ExpandProperty Name #Searches : OU=VISN09,DC=v09,DC=med,DC=va,DC=gov\n                                \n                    if (!$HostnameSearch_lvl3) {\n                        $Hostname = $ImportedEE\n                        #$HostnameArray.Add($Hostname) > $null\n                        #$ADLocationArray.Add(\"Not Found\") > $null\n                        Write-Host \"Extended search found $ImportedEE could not be located in OU: \" $OUSearchScope.Split(\",\", 3)[2] -foreground Red #NEVER Found\n                    }\n                    else {\n                        $Hostname = $HostnameSearch_lvl3\n                        #$HostnameArray.Add($Hostname) > $null\n                        #$ADLocationArray.Add($OUSearchScope.Split(\",\", 3)[2]) > $null\n                        Write-Host \"Extended search found $ImportedEE resolves to $Hostname It was in OU: \" $OUSearchScope.Split(\",\", 3)[2] -foreground Green #Found in OU: OU=VISN09,DC=v09,DC=med,DC=va,DC=gov\n                    }\n                }\n                else {\n                    $Hostname = $HostnameSearch_lvl2\n                    #$HostnameArray.Add($Hostname) > $null\n                    #$ADLocationArray.Add($OUSearchScope.Split(\",\", 2)[1]) > $null\n                    Write-Host \"Extended search found $ImportedEE resolves to $Hostname It was in OU: \" $OUSearchScope.Split(\",\", 2)[1] -foreground Green #Found in OU: OU=Lexington (LEX),OU=VISN09,DC=v09,DC=med,DC=va,DC=gov\n                }\n            }       \n            else {\n                $Hostname = $HostnameSearch_lvl1\n                #$HostnameArray.Add($Hostname) > $null\n                #$ADLocationArray.Add($OUSearchScope) > $null\n                Write-Host \"Extended search found $ImportedEE resolves to $Hostname\" -foreground Green #Found in : OU=Laptops,OU=Lexington (LEX),OU=VISN09,DC=v09,DC=med,DC=va,DC=gov\n            }\n            \n            #Sources:\n            #https://adamtheautomator.com/powershell-parameter/\n        }\n        $Hostname = Get-ADComputer -Filter * -SearchBase $OUSearchScope | Where-Object {$_.Name -like $ImportedEE} | Select-Object -ExpandProperty Name\n    } \n    else{\n        Add-Type -AssemblyName PresentationCore,PresentationFramework\n        $msgBody1 = \"Hey! RSAT tools are NOT installed. What are you trying to pull here? I will install it (about 5-10 mins) But do you also want the full RSAT set (about 20min install)? It give you all RSAT tools and functions. \"\n        $msgTitle1 = \"Do you want full set of tools?\"\n        $msgButton1 = \"YesNo\"\n        $msgImage1 = \"Question\"\n        $Result1 = [System.Windows.MessageBox]::Show($msgBody1,$msgTitle1,$msgButton1,$msgImage1)\n        if ( ($result1).value__ -ne 7){ #-ne means not equal 7 is no 6 is yes\n            Write-Host \"Good choice, installing full RSAT set\"\n            Get-WindowsCapability -Name RSAT* -Online | Add-WindowsCapability -Online\n        }\n        else{\n            Write-Host \"Ok just install the requiered\"\n            Get-WindowsCapability -Name Rsat.ActiveDirectory.DS-LDS.* -Online #RSAT: Active Directory Domain Services and Lightweight Directory Services Tools\n            Get-WindowsCapability -Name Rsat.CertificateServices.Tools* -Online #RSAT: Active Directory Certificate Services Tools \n            Get-WindowsCapability -Name Rsat.RemoteDesktop.Services.Tools* -Online #RSAT: Remote Desktop Services Tools   \n            Get-WindowsCapability -Name Rsat.GroupPolicy.Management.Tools* -Online #RSAT: Group Policy Management Tools \n        }\n        Write-Host \"Oops, I killed your boot sector! Na, RSAT tools are installed now. Updating your help. Judging from our interaction so far, your gonna need it.\"\n            Update-Help\n        Write-Host \"Done\"\n    }\n    $json | Add-Member -Type NoteProperty -Name 'Hostname' -Value \"$Hostname\"\n    $json | ConvertTo-Json | Set-Content $jsonfile\n    #echo \"Hostname = '$Hostname'\" | out-file -filepath $jsonfile -append -Encoding ASCII #Thsi writes it to the local var json file file\n    "}